import java.nio.file.Files
import java.util.*

/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java library project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.3.2/userguide/building_java_projects.html
 */

group = "ch.admin.bar"
version = scmVersion.version
val siardVersion = "2.2"
val versionedProjectName = "${project.name}-${scmVersion.version}"

val jarFile = File("$buildDir/libs/${versionedProjectName}.jar")
val generatedResourcesDir = Files.createDirectories(File("${buildDir}/generated/resources").toPath())
val deliverablesDir = Files.createDirectories(File("${buildDir}/deliverables").toPath())

plugins {
    `java-library`
    id("pl.allegro.tech.build.axion-release") version "1.14.3"
    id("io.freefair.lombok") version "6.5.0"
}

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

repositories {
    mavenCentral()
}

sourceSets {
    create("integrationTest") {
        java.srcDir("src/integrationTest/java")
        compileClasspath += sourceSets["main"].output + configurations["testRuntimeClasspath"]
        runtimeClasspath += output + compileClasspath + sourceSets["test"].runtimeClasspath
    }
}

dependencies {
    implementation("org.apache.tika:tika-core:2.9.1") // used for getting mime-type from binary data
    implementation("ch.qos.logback:logback-classic:1.3.14") // latest version which supports java 8
    implementation("com.mysql:mysql-connector-j:8.3.0") // transitive dependency from lib/jdbcmysql.jar
    implementation(fileTree("lib") { include("*.jar") })

    implementation("ch.admin.bar:JdbcPostgres:v2.2.0")
    implementation("ch.admin.bar:jdbcoracle:v2.2.3")

    testImplementation("junit:junit:4.13.2")
    testImplementation("org.assertj:assertj-core:3.24.2")
    testImplementation("io.chandler:ZipInputStreamPatch64:1.0.0") // needed because of a bug in java.util.zip (see https://github.com/cjgriscom/ZipInputStreamPatch64)
    testImplementation("org.assertj:assertj-core:3.24.2")
    testImplementation("com.fasterxml.jackson.dataformat:jackson-dataformat-xml:2.15.2")
    testImplementation("com.fasterxml.jackson.datatype:jackson-datatype-jdk8:2.15.2")
    testImplementation("org.mockito:mockito-core:4.11.0") // latest version which supports java 8

    // testcontainers
    testImplementation("org.testcontainers:testcontainers:1.19.0")
    testImplementation("org.testcontainers:mssqlserver:1.19.0")
    testImplementation("org.testcontainers:postgresql:1.19.0")
    testImplementation("org.testcontainers:mysql:1.19.0")
    testImplementation("org.testcontainers:mariadb:1.19.6")
    testImplementation("org.mariadb.jdbc:mariadb-java-client:2.7.4") // Used by mariadb testcontainer
    testImplementation("org.testcontainers:oracle-xe:1.19.0")
    testImplementation("org.testcontainers:db2:1.19.0")

    testImplementation(platform("org.junit:junit-bom:5.13.1"))
    testImplementation("org.junit.jupiter:junit-jupiter")
    testRuntimeOnly("org.junit.platform:junit-platform-launcher")
    testRuntimeOnly("org.junit.vintage:junit-vintage-engine:5.13.1")
}

tasks.withType(Jar::class) {
    manifest {
        attributes["Manifest-Version"] = "1.0"
        attributes["Created-By"] = "Hartwig Thomas, Enter AG, RÃ¼ti ZH, Switzerland; Puzzle ITC GmbH, Switzerland"
        attributes["Specification-Title"] = "SIARD CMD"
        attributes["Specification-Version"] = siardVersion
        attributes["Specification-Vendor"] = "Swiss Federal Archives, Berne, Switzerland"
        attributes["Implementation-Title"] = "SIARD CMD"
        attributes["Implementation-Version"] = archiveVersion
        attributes["Implementation-Vendor"] = "Swiss Federal Archives, Berne, Switzerland"
        attributes["Class-Path"] = "siardapi.jar " +
                "Zip64File.jar " +
                "xsdlib-2010.1.jar " +
                "woodstox-core-lgpl-4.1.2.jar " +
                "woodstox-msv-rng-datatype-20020414.jar " +
                "activation-1.1.1.jar " +
                "jaxb-api.jar " +
                "jaxb-core.jar " +
                "jaxb-impl.jar " +
                "msv-core-2010.2.jar " +
                "stax2-api-3.1.1.jar " +
                "jdbcaccess.jar " +
                "jackcess-2.1.6a.jar " +
                "commons-lang-2.6.jar " +
                "commons-logging-1.1.3.jar " +
                "jdbcpostgres.jar " +
                "postgresql-42.2.5.jar " +
                "jdbcdb2.jar " +
                "db2jcc4.jar " +
                "jdbcmysql.jar " +
                "mysql-connector-java-8.0.18.jar " +
                "jdbcoracle.jar " +
                "ojdbc6.jar " +
                "xdb6.jar " +
                "xmlparserv2.jar " +
                "jdbcmssql.jar " +
                "sqljdbc41.jar " +
                "jts-1.14.jar   " +
                "jdbcbase.jar " +
                "enterutils.jar " +
                "antlr-runtime-4.5.2.jar " +
                "tika-app-2.8.0.jar"
    }
}

task<Test>("integrationTest") {
    description = "Runs the integration tests"
    group = "verification"
    testClassesDirs = sourceSets["integrationTest"].output.classesDirs
    classpath = sourceSets["integrationTest"].runtimeClasspath
    mustRunAfter(tasks["test"])
    useJUnitPlatform()
}

tasks.test {
    useJUnitPlatform()
    testLogging {
        events("passed", "skipped", "failed")
    }
}


task<Zip>("packDeliverables") {
    description = "Creates ZIP-file which contains all deliverables"
    group = "release"
    dependsOn(tasks["build"])

    archiveFileName.set("${versionedProjectName}.zip")
    destinationDirectory.set(deliverablesDir.toFile())

    from(layout.projectDirectory.dir("doc")) {
        into("doc")
        exclude("/manual/developer")
    }
    from(layout.projectDirectory.dir("etc")) {
        into("etc")
        exclude("debug.properties")
    }
    from(layout.projectDirectory.dir("lib")) {
        into("lib")
        exclude(
                "*-test.jar",
                "hamcrest-core-1.3.jar"
        )
    }
    from(jarFile) {
        into("lib")
        rename("${versionedProjectName}.jar", "${project.name}.jar")
    }
    from(layout.projectDirectory.dir("testfiles")) {
        into("testfiles")
        include("sample.siard")
    }
    from(layout.projectDirectory) {
        include(
                "LICENSE.txt",
                "RELEASE.txt"
        )
    }
    from(layout.projectDirectory.dir("bin")) {
        include("*.sh")
        fileMode = 0b111101101 // = 755 (needs to be defined in binary format https://github.com/gradle/kotlin-dsl-samples/issues/1412)
    }
    from(layout.projectDirectory.dir("bin")) {
        exclude("*.sh")
    }

    doLast {
        /*
        Copy the build jar file without version information (for easier integration in other projects)
        to the deliverables-directory for easier upload as artefact to GitHub.
         */
        val jarWithoutVersionFile = deliverablesDir.resolve("${project.name}.jar").toFile()
        jarFile.copyTo(jarWithoutVersionFile, overwrite = true)
    }
}

task("createVersionsPropertiesFile") {
    description = "Creates a properties file which contains all needed versions information"
    group = "build"



    doLast {
        val file = generatedResourcesDir.resolve("versions.properties").toFile()
        if (!file.exists()) {
            file.parentFile.mkdirs()
            file.createNewFile()
            logger.info("$file successfully created")
        }

        file.writer().use { writer ->
            val properties = Properties()
            properties["SIARD-Version"] = siardVersion
            properties["App-Version"] = "${project.version}"
            properties.store(writer, null)

            logger.info("$file successfully generated (SIARD: $siardVersion, App: ${project.version})")
        }
    }
}

tasks {
    compileJava {
        dependsOn("createVersionsPropertiesFile")
    }

    processResources {
        from(generatedResourcesDir)
        logger.info("$generatedResourcesDir added to processed resources")
    }
}
