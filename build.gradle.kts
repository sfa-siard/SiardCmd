/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java library project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.3.2/userguide/building_java_projects.html
 */

plugins {
    `java-library`
    id("io.freefair.lombok") version "6.5.0"
    id("pl.allegro.tech.build.axion-release") version "1.14.3"
}

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

repositories {
    mavenCentral()
}

version = scmVersion.version

sourceSets {
    create("integrationTest") {
        java.srcDir("src/integrationTest/java")
        compileClasspath += sourceSets["main"].output + configurations["testRuntimeClasspath"]
        runtimeClasspath += output + compileClasspath + sourceSets["test"].runtimeClasspath
    }
}

dependencies {
    implementation(fileTree("lib") { include("*.jar") })

    testImplementation("junit:junit:4.13.2")
    testImplementation("org.testcontainers:testcontainers:1.19.0")
    testImplementation("org.testcontainers:mssqlserver:1.19.0")
    testImplementation("org.testcontainers:postgresql:1.19.0")
    testImplementation("org.testcontainers:mysql:1.19.0")
    testImplementation("org.testcontainers:oracle-xe:1.19.0")
    testImplementation("org.testcontainers:db2:1.19.0")
}

tasks.withType(Jar::class) {
    manifest {
        attributes["Manifest-Version"] = "1.0"
        attributes["Created-By"] = "Hartwig Thomas, Enter AG, RÃ¼ti ZH, Switzerland; Puzzle ITC GmbH, Switzerland"
        attributes["Specification-Title"] = "SIARD CMD"
        attributes["Specification-Version"] = "2.2"
        attributes["Specification-Vendor"] = "Swiss Federal Archives, Berne, Switzerland"
        attributes["Implementation-Title"] = "SIARD CMD"
        attributes["Implementation-Version"] = archiveVersion
        attributes["Implementation-Vendor"] = "Swiss Federal Archives, Berne, Switzerland"
        attributes["Class-Path"] = "siardapi.jar " +
                "Zip64File.jar " +
                "xsdlib-2010.1.jar " +
                "woodstox-core-lgpl-4.1.2.jar " +
                "woodstox-msv-rng-datatype-20020414.jar " +
                "activation-1.1.1.jar " +
                "jaxb-api.jar " +
                "jaxb-core.jar " +
                "jaxb-impl.jar " +
                "msv-core-2010.2.jar " +
                "stax2-api-3.1.1.jar " +
                "jdbcaccess.jar " +
                "jackcess-2.1.6a.jar " +
                "commons-lang-2.6.jar " +
                "commons-logging-1.1.3.jar " +
                "jdbcpostgres.jar " +
                "postgresql-42.2.5.jar " +
                "jdbcdb2.jar " +
                "db2jcc4.jar " +
                "jdbcmysql.jar " +
                "mysql-connector-java-8.0.18.jar " +
                "jdbcoracle.jar " +
                "ojdbc6.jar " +
                "xdb6.jar " +
                "xmlparserv2.jar " +
                "jdbcmssql.jar " +
                "sqljdbc41.jar " +
                "jts-1.14.jar   " +
                "jdbcbase.jar " +
                "enterutils.jar " +
                "antlr-runtime-4.5.2.jar " +
                "tika-app-2.8.0.jar"
    }
}

task<Test>("integrationTest") {
    description = "Runs the integration tests"
    group = "verification"
    testClassesDirs = sourceSets["integrationTest"].output.classesDirs
    classpath = sourceSets["integrationTest"].runtimeClasspath
    mustRunAfter(tasks["test"])
    useJUnit()
}
