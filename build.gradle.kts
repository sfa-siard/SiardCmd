/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java library project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.3.2/userguide/building_java_projects.html
 */

plugins {
    // Apply the java-library plugin for API and implementation separation.
    `java-library`
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

sourceSets {
    create("integrationTest") {
        java.srcDir("src/integrationTest/java")
        resources.srcDir("src/integrationTest/resources")
        compileClasspath += sourceSets["main"].output + configurations["testRuntimeClasspath"]
        runtimeClasspath += output + compileClasspath + sourceSets["test"].runtimeClasspath
    }
}

dependencies {
    implementation(fileTree("lib") { include("*.jar") })

    // Use JUnit test framework.
    testImplementation("junit:junit:4.13.2")
    testImplementation("org.testcontainers:testcontainers:1.19.0")
    testImplementation("org.testcontainers:mssqlserver:1.19.0")
}

/**
 *  ManifestAttributes (from enterutils.jar) expects the manifest file to sit in some weird places. The copyManifest task
 *  makes sure that the file is located at the correct location.
 *  This is a workaround until EnterUtils is fixed.
 */
tasks.register<Copy>("copyManifest") {
    from(layout.projectDirectory.file("src/main/META-INF/MANIFEST.MF"))
    into(layout.buildDirectory.dir("tmp/jar"))
}

task<Test>("integrationTest") {
    description = "Runs the integration tests"
    group = "verification"
    testClassesDirs = sourceSets["integrationTest"].output.classesDirs
    classpath = sourceSets["integrationTest"].runtimeClasspath
    mustRunAfter(tasks["test"])
    useJUnit()
}

tasks.test {
    dependsOn("copyManifest")
}